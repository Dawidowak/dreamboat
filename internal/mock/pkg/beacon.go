// Code generated by MockGen. DO NOT EDIT.
// Source: beacon.go

// Package mock_relay is a generated GoMock package.
package mock_relay

import (
	context "context"
	reflect "reflect"

	relay "github.com/blocknative/dreamboat/pkg"
	types "github.com/flashbots/go-boost-utils/types"
	gomock "github.com/golang/mock/gomock"
)

// MockBeaconClient is a mock of BeaconClient interface.
type MockBeaconClient struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconClientMockRecorder
}

// MockBeaconClientMockRecorder is the mock recorder for MockBeaconClient.
type MockBeaconClientMockRecorder struct {
	mock *MockBeaconClient
}

// NewMockBeaconClient creates a new mock instance.
func NewMockBeaconClient(ctrl *gomock.Controller) *MockBeaconClient {
	mock := &MockBeaconClient{ctrl: ctrl}
	mock.recorder = &MockBeaconClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconClient) EXPECT() *MockBeaconClientMockRecorder {
	return m.recorder
}

// GetProposerByIndex mocks base method.
func (m *MockBeaconClient) GetProposerByIndex(arg0 uint64) (types.PubkeyHex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposerByIndex", arg0)
	ret0, _ := ret[0].(types.PubkeyHex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposerByIndex indicates an expected call of GetProposerByIndex.
func (mr *MockBeaconClientMockRecorder) GetProposerByIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposerByIndex", reflect.TypeOf((*MockBeaconClient)(nil).GetProposerByIndex), arg0)
}

// GetProposerDuties mocks base method.
func (m *MockBeaconClient) GetProposerDuties(arg0 relay.Epoch) (*relay.RegisteredProposersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposerDuties", arg0)
	ret0, _ := ret[0].(*relay.RegisteredProposersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposerDuties indicates an expected call of GetProposerDuties.
func (mr *MockBeaconClientMockRecorder) GetProposerDuties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposerDuties", reflect.TypeOf((*MockBeaconClient)(nil).GetProposerDuties), arg0)
}

// GetValidatorsMap mocks base method.
func (m *MockBeaconClient) GetValidatorsMap() relay.BuilderGetValidatorsResponseEntrySlice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorsMap")
	ret0, _ := ret[0].(relay.BuilderGetValidatorsResponseEntrySlice)
	return ret0
}

// GetValidatorsMap indicates an expected call of GetValidatorsMap.
func (mr *MockBeaconClientMockRecorder) GetValidatorsMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorsMap", reflect.TypeOf((*MockBeaconClient)(nil).GetValidatorsMap))
}

// HeadSlot mocks base method.
func (m *MockBeaconClient) HeadSlot() relay.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadSlot")
	ret0, _ := ret[0].(relay.Slot)
	return ret0
}

// HeadSlot indicates an expected call of HeadSlot.
func (mr *MockBeaconClientMockRecorder) HeadSlot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadSlot", reflect.TypeOf((*MockBeaconClient)(nil).HeadSlot))
}

// IsValidator mocks base method.
func (m *MockBeaconClient) IsValidator(arg0 relay.PubKey) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidator", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidator indicates an expected call of IsValidator.
func (mr *MockBeaconClientMockRecorder) IsValidator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidator", reflect.TypeOf((*MockBeaconClient)(nil).IsValidator), arg0)
}

// ProcessNewSlot mocks base method.
func (m *MockBeaconClient) ProcessNewSlot(arg0 context.Context, arg1 relay.Slot, arg2 relay.Datastore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessNewSlot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessNewSlot indicates an expected call of ProcessNewSlot.
func (mr *MockBeaconClientMockRecorder) ProcessNewSlot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessNewSlot", reflect.TypeOf((*MockBeaconClient)(nil).ProcessNewSlot), arg0, arg1, arg2)
}

// SubscribeToHeadEvents mocks base method.
func (m *MockBeaconClient) SubscribeToHeadEvents(arg0 context.Context) <-chan relay.HeadEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToHeadEvents", arg0)
	ret0, _ := ret[0].(<-chan relay.HeadEvent)
	return ret0
}

// SubscribeToHeadEvents indicates an expected call of SubscribeToHeadEvents.
func (mr *MockBeaconClientMockRecorder) SubscribeToHeadEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToHeadEvents", reflect.TypeOf((*MockBeaconClient)(nil).SubscribeToHeadEvents), arg0)
}

// SyncStatus mocks base method.
func (m *MockBeaconClient) SyncStatus() (*relay.SyncStatusPayloadData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatus")
	ret0, _ := ret[0].(*relay.SyncStatusPayloadData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncStatus indicates an expected call of SyncStatus.
func (mr *MockBeaconClientMockRecorder) SyncStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatus", reflect.TypeOf((*MockBeaconClient)(nil).SyncStatus))
}

// UpdateProposerDuties mocks base method.
func (m *MockBeaconClient) UpdateProposerDuties(arg0 context.Context, arg1 relay.Slot, arg2 relay.Datastore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProposerDuties", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProposerDuties indicates an expected call of UpdateProposerDuties.
func (mr *MockBeaconClientMockRecorder) UpdateProposerDuties(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProposerDuties", reflect.TypeOf((*MockBeaconClient)(nil).UpdateProposerDuties), arg0, arg1, arg2)
}
