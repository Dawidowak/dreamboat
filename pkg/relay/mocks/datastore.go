// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blocknative/dreamboat/pkg/relay (interfaces: RelayDatastore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	structs "github.com/blocknative/dreamboat/pkg/structs"
	types "github.com/flashbots/go-boost-utils/types"
	gomock "github.com/golang/mock/gomock"
	datastore "github.com/ipfs/go-datastore"
	reflect "reflect"
	time "time"
)

// MockRelayDatastore is a mock of RelayDatastore interface
type MockRelayDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockRelayDatastoreMockRecorder
}

// MockRelayDatastoreMockRecorder is the mock recorder for MockRelayDatastore
type MockRelayDatastoreMockRecorder struct {
	mock *MockRelayDatastore
}

// NewMockRelayDatastore creates a new mock instance
func NewMockRelayDatastore(ctrl *gomock.Controller) *MockRelayDatastore {
	mock := &MockRelayDatastore{ctrl: ctrl}
	mock.recorder = &MockRelayDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRelayDatastore) EXPECT() *MockRelayDatastoreMockRecorder {
	return m.recorder
}

// GetDelivered mocks base method
func (m *MockRelayDatastore) GetDelivered(arg0 context.Context, arg1 structs.TraceQuery) (structs.BidTraceWithTimestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelivered", arg0, arg1)
	ret0, _ := ret[0].(structs.BidTraceWithTimestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelivered indicates an expected call of GetDelivered
func (mr *MockRelayDatastoreMockRecorder) GetDelivered(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelivered", reflect.TypeOf((*MockRelayDatastore)(nil).GetDelivered), arg0, arg1)
}

// GetDeliveredBySlot mocks base method
func (m *MockRelayDatastore) GetDeliveredBySlot(arg0 context.Context, arg1 structs.Slot) (structs.BidTraceWithTimestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveredBySlot", arg0, arg1)
	ret0, _ := ret[0].(structs.BidTraceWithTimestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveredBySlot indicates an expected call of GetDeliveredBySlot
func (mr *MockRelayDatastoreMockRecorder) GetDeliveredBySlot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveredBySlot", reflect.TypeOf((*MockRelayDatastore)(nil).GetDeliveredBySlot), arg0, arg1)
}

// GetDeliveredBySlots mocks base method
func (m *MockRelayDatastore) GetDeliveredBySlots(arg0 context.Context, arg1 []structs.Slot) ([]structs.BidTraceWithTimestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveredBySlots", arg0, arg1)
	ret0, _ := ret[0].([]structs.BidTraceWithTimestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveredBySlots indicates an expected call of GetDeliveredBySlots
func (mr *MockRelayDatastoreMockRecorder) GetDeliveredBySlots(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveredBySlots", reflect.TypeOf((*MockRelayDatastore)(nil).GetDeliveredBySlots), arg0, arg1)
}

// GetHeaders mocks base method
func (m *MockRelayDatastore) GetHeaders(arg0 context.Context, arg1 structs.TraceQuery) ([]structs.HeaderAndTrace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaders", arg0, arg1)
	ret0, _ := ret[0].([]structs.HeaderAndTrace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaders indicates an expected call of GetHeaders
func (mr *MockRelayDatastoreMockRecorder) GetHeaders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaders", reflect.TypeOf((*MockRelayDatastore)(nil).GetHeaders), arg0, arg1)
}

// GetHeadersBySlot mocks base method
func (m *MockRelayDatastore) GetHeadersBySlot(arg0 context.Context, arg1 structs.Slot) ([]structs.HeaderAndTrace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeadersBySlot", arg0, arg1)
	ret0, _ := ret[0].([]structs.HeaderAndTrace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeadersBySlot indicates an expected call of GetHeadersBySlot
func (mr *MockRelayDatastoreMockRecorder) GetHeadersBySlot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeadersBySlot", reflect.TypeOf((*MockRelayDatastore)(nil).GetHeadersBySlot), arg0, arg1)
}

// GetHeadersBySlots mocks base method
func (m *MockRelayDatastore) GetHeadersBySlots(arg0 context.Context, arg1 []structs.Slot) ([]structs.HeaderAndTrace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeadersBySlots", arg0, arg1)
	ret0, _ := ret[0].([]structs.HeaderAndTrace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeadersBySlots indicates an expected call of GetHeadersBySlots
func (mr *MockRelayDatastoreMockRecorder) GetHeadersBySlots(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeadersBySlots", reflect.TypeOf((*MockRelayDatastore)(nil).GetHeadersBySlots), arg0, arg1)
}

// GetPayload mocks base method
func (m *MockRelayDatastore) GetPayload(arg0 context.Context, arg1 datastore.Key) (*structs.BlockBidAndTrace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayload", arg0, arg1)
	ret0, _ := ret[0].(*structs.BlockBidAndTrace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayload indicates an expected call of GetPayload
func (mr *MockRelayDatastoreMockRecorder) GetPayload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayload", reflect.TypeOf((*MockRelayDatastore)(nil).GetPayload), arg0, arg1)
}

// GetRegistration mocks base method
func (m *MockRelayDatastore) GetRegistration(arg0 context.Context, arg1 structs.PubKey) (types.SignedValidatorRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistration", arg0, arg1)
	ret0, _ := ret[0].(types.SignedValidatorRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistration indicates an expected call of GetRegistration
func (mr *MockRelayDatastoreMockRecorder) GetRegistration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistration", reflect.TypeOf((*MockRelayDatastore)(nil).GetRegistration), arg0, arg1)
}

// PutDelivered mocks base method
func (m *MockRelayDatastore) PutDelivered(arg0 context.Context, arg1 structs.Slot, arg2 structs.DeliveredTrace, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDelivered", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutDelivered indicates an expected call of PutDelivered
func (mr *MockRelayDatastoreMockRecorder) PutDelivered(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDelivered", reflect.TypeOf((*MockRelayDatastore)(nil).PutDelivered), arg0, arg1, arg2, arg3)
}

// PutHeader mocks base method
func (m *MockRelayDatastore) PutHeader(arg0 context.Context, arg1 structs.Slot, arg2 structs.HeaderAndTrace, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutHeader", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutHeader indicates an expected call of PutHeader
func (mr *MockRelayDatastoreMockRecorder) PutHeader(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutHeader", reflect.TypeOf((*MockRelayDatastore)(nil).PutHeader), arg0, arg1, arg2, arg3)
}

// PutPayload mocks base method
func (m *MockRelayDatastore) PutPayload(arg0 context.Context, arg1 datastore.Key, arg2 *structs.BlockBidAndTrace, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPayload", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutPayload indicates an expected call of PutPayload
func (mr *MockRelayDatastoreMockRecorder) PutPayload(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPayload", reflect.TypeOf((*MockRelayDatastore)(nil).PutPayload), arg0, arg1, arg2, arg3)
}

// PutRegistration mocks base method
func (m *MockRelayDatastore) PutRegistration(arg0 context.Context, arg1 structs.PubKey, arg2 types.SignedValidatorRegistration, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRegistration", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutRegistration indicates an expected call of PutRegistration
func (mr *MockRelayDatastoreMockRecorder) PutRegistration(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRegistration", reflect.TypeOf((*MockRelayDatastore)(nil).PutRegistration), arg0, arg1, arg2, arg3)
}
